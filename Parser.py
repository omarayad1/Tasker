# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Parser', [dirname(__file__)])
        except ImportError:
            import _Parser
            return _Parser
        if fp is not None:
            try:
                _mod = imp.load_module('_Parser', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Parser = swig_import_helper()
    del swig_import_helper
else:
    import _Parser
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Parser.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _Parser.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Parser.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Parser.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Parser.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Parser.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Parser.SwigPyIterator_copy(self)

    def next(self):
        return _Parser.SwigPyIterator_next(self)

    def __next__(self):
        return _Parser.SwigPyIterator___next__(self)

    def previous(self):
        return _Parser.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Parser.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Parser.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Parser.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Parser.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Parser.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Parser.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Parser.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Parser.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Parser.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Parser.IntVector___nonzero__(self)

    def __bool__(self):
        return _Parser.IntVector___bool__(self)

    def __len__(self):
        return _Parser.IntVector___len__(self)

    def pop(self):
        return _Parser.IntVector_pop(self)

    def __getslice__(self, i, j):
        return _Parser.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Parser.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Parser.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Parser.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Parser.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Parser.IntVector___setitem__(self, *args)

    def append(self, x):
        return _Parser.IntVector_append(self, x)

    def empty(self):
        return _Parser.IntVector_empty(self)

    def size(self):
        return _Parser.IntVector_size(self)

    def clear(self):
        return _Parser.IntVector_clear(self)

    def swap(self, v):
        return _Parser.IntVector_swap(self, v)

    def get_allocator(self):
        return _Parser.IntVector_get_allocator(self)

    def begin(self):
        return _Parser.IntVector_begin(self)

    def end(self):
        return _Parser.IntVector_end(self)

    def rbegin(self):
        return _Parser.IntVector_rbegin(self)

    def rend(self):
        return _Parser.IntVector_rend(self)

    def pop_back(self):
        return _Parser.IntVector_pop_back(self)

    def erase(self, *args):
        return _Parser.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _Parser.new_IntVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Parser.IntVector_push_back(self, x)

    def front(self):
        return _Parser.IntVector_front(self)

    def back(self):
        return _Parser.IntVector_back(self)

    def assign(self, n, x):
        return _Parser.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _Parser.IntVector_resize(self, *args)

    def insert(self, *args):
        return _Parser.IntVector_insert(self, *args)

    def reserve(self, n):
        return _Parser.IntVector_reserve(self, n)

    def capacity(self):
        return _Parser.IntVector_capacity(self)
    __swig_destroy__ = _Parser.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _Parser.IntVector_swigregister
IntVector_swigregister(IntVector)

class ProcVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProcVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProcVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Parser.ProcVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Parser.ProcVector___nonzero__(self)

    def __bool__(self):
        return _Parser.ProcVector___bool__(self)

    def __len__(self):
        return _Parser.ProcVector___len__(self)

    def pop(self):
        return _Parser.ProcVector_pop(self)

    def __getslice__(self, i, j):
        return _Parser.ProcVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Parser.ProcVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Parser.ProcVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Parser.ProcVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Parser.ProcVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Parser.ProcVector___setitem__(self, *args)

    def append(self, x):
        return _Parser.ProcVector_append(self, x)

    def empty(self):
        return _Parser.ProcVector_empty(self)

    def size(self):
        return _Parser.ProcVector_size(self)

    def clear(self):
        return _Parser.ProcVector_clear(self)

    def swap(self, v):
        return _Parser.ProcVector_swap(self, v)

    def get_allocator(self):
        return _Parser.ProcVector_get_allocator(self)

    def begin(self):
        return _Parser.ProcVector_begin(self)

    def end(self):
        return _Parser.ProcVector_end(self)

    def rbegin(self):
        return _Parser.ProcVector_rbegin(self)

    def rend(self):
        return _Parser.ProcVector_rend(self)

    def pop_back(self):
        return _Parser.ProcVector_pop_back(self)

    def erase(self, *args):
        return _Parser.ProcVector_erase(self, *args)

    def __init__(self, *args):
        this = _Parser.new_ProcVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Parser.ProcVector_push_back(self, x)

    def front(self):
        return _Parser.ProcVector_front(self)

    def back(self):
        return _Parser.ProcVector_back(self)

    def assign(self, n, x):
        return _Parser.ProcVector_assign(self, n, x)

    def resize(self, *args):
        return _Parser.ProcVector_resize(self, *args)

    def insert(self, *args):
        return _Parser.ProcVector_insert(self, *args)

    def reserve(self, n):
        return _Parser.ProcVector_reserve(self, n)

    def capacity(self):
        return _Parser.ProcVector_capacity(self)
    __swig_destroy__ = _Parser.delete_ProcVector
    __del__ = lambda self: None
ProcVector_swigregister = _Parser.ProcVector_swigregister
ProcVector_swigregister(ProcVector)

class CpuVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CpuVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Parser.CpuVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Parser.CpuVector___nonzero__(self)

    def __bool__(self):
        return _Parser.CpuVector___bool__(self)

    def __len__(self):
        return _Parser.CpuVector___len__(self)

    def pop(self):
        return _Parser.CpuVector_pop(self)

    def __getslice__(self, i, j):
        return _Parser.CpuVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Parser.CpuVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Parser.CpuVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Parser.CpuVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Parser.CpuVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Parser.CpuVector___setitem__(self, *args)

    def append(self, x):
        return _Parser.CpuVector_append(self, x)

    def empty(self):
        return _Parser.CpuVector_empty(self)

    def size(self):
        return _Parser.CpuVector_size(self)

    def clear(self):
        return _Parser.CpuVector_clear(self)

    def swap(self, v):
        return _Parser.CpuVector_swap(self, v)

    def get_allocator(self):
        return _Parser.CpuVector_get_allocator(self)

    def begin(self):
        return _Parser.CpuVector_begin(self)

    def end(self):
        return _Parser.CpuVector_end(self)

    def rbegin(self):
        return _Parser.CpuVector_rbegin(self)

    def rend(self):
        return _Parser.CpuVector_rend(self)

    def pop_back(self):
        return _Parser.CpuVector_pop_back(self)

    def erase(self, *args):
        return _Parser.CpuVector_erase(self, *args)

    def __init__(self, *args):
        this = _Parser.new_CpuVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Parser.CpuVector_push_back(self, x)

    def front(self):
        return _Parser.CpuVector_front(self)

    def back(self):
        return _Parser.CpuVector_back(self)

    def assign(self, n, x):
        return _Parser.CpuVector_assign(self, n, x)

    def resize(self, *args):
        return _Parser.CpuVector_resize(self, *args)

    def insert(self, *args):
        return _Parser.CpuVector_insert(self, *args)

    def reserve(self, n):
        return _Parser.CpuVector_reserve(self, n)

    def capacity(self):
        return _Parser.CpuVector_capacity(self)
    __swig_destroy__ = _Parser.delete_CpuVector
    __del__ = lambda self: None
CpuVector_swigregister = _Parser.CpuVector_swigregister
CpuVector_swigregister(CpuVector)

class ThreadVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Parser.ThreadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Parser.ThreadVector___nonzero__(self)

    def __bool__(self):
        return _Parser.ThreadVector___bool__(self)

    def __len__(self):
        return _Parser.ThreadVector___len__(self)

    def pop(self):
        return _Parser.ThreadVector_pop(self)

    def __getslice__(self, i, j):
        return _Parser.ThreadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Parser.ThreadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Parser.ThreadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Parser.ThreadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Parser.ThreadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Parser.ThreadVector___setitem__(self, *args)

    def append(self, x):
        return _Parser.ThreadVector_append(self, x)

    def empty(self):
        return _Parser.ThreadVector_empty(self)

    def size(self):
        return _Parser.ThreadVector_size(self)

    def clear(self):
        return _Parser.ThreadVector_clear(self)

    def swap(self, v):
        return _Parser.ThreadVector_swap(self, v)

    def get_allocator(self):
        return _Parser.ThreadVector_get_allocator(self)

    def begin(self):
        return _Parser.ThreadVector_begin(self)

    def end(self):
        return _Parser.ThreadVector_end(self)

    def rbegin(self):
        return _Parser.ThreadVector_rbegin(self)

    def rend(self):
        return _Parser.ThreadVector_rend(self)

    def pop_back(self):
        return _Parser.ThreadVector_pop_back(self)

    def erase(self, *args):
        return _Parser.ThreadVector_erase(self, *args)

    def __init__(self, *args):
        this = _Parser.new_ThreadVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Parser.ThreadVector_push_back(self, x)

    def front(self):
        return _Parser.ThreadVector_front(self)

    def back(self):
        return _Parser.ThreadVector_back(self)

    def assign(self, n, x):
        return _Parser.ThreadVector_assign(self, n, x)

    def resize(self, *args):
        return _Parser.ThreadVector_resize(self, *args)

    def insert(self, *args):
        return _Parser.ThreadVector_insert(self, *args)

    def reserve(self, n):
        return _Parser.ThreadVector_reserve(self, n)

    def capacity(self):
        return _Parser.ThreadVector_capacity(self)
    __swig_destroy__ = _Parser.delete_ThreadVector
    __del__ = lambda self: None
ThreadVector_swigregister = _Parser.ThreadVector_swigregister
ThreadVector_swigregister(ThreadVector)

class CpuDataVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuDataVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CpuDataVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Parser.CpuDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Parser.CpuDataVector___nonzero__(self)

    def __bool__(self):
        return _Parser.CpuDataVector___bool__(self)

    def __len__(self):
        return _Parser.CpuDataVector___len__(self)

    def pop(self):
        return _Parser.CpuDataVector_pop(self)

    def __getslice__(self, i, j):
        return _Parser.CpuDataVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Parser.CpuDataVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Parser.CpuDataVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Parser.CpuDataVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Parser.CpuDataVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Parser.CpuDataVector___setitem__(self, *args)

    def append(self, x):
        return _Parser.CpuDataVector_append(self, x)

    def empty(self):
        return _Parser.CpuDataVector_empty(self)

    def size(self):
        return _Parser.CpuDataVector_size(self)

    def clear(self):
        return _Parser.CpuDataVector_clear(self)

    def swap(self, v):
        return _Parser.CpuDataVector_swap(self, v)

    def get_allocator(self):
        return _Parser.CpuDataVector_get_allocator(self)

    def begin(self):
        return _Parser.CpuDataVector_begin(self)

    def end(self):
        return _Parser.CpuDataVector_end(self)

    def rbegin(self):
        return _Parser.CpuDataVector_rbegin(self)

    def rend(self):
        return _Parser.CpuDataVector_rend(self)

    def pop_back(self):
        return _Parser.CpuDataVector_pop_back(self)

    def erase(self, *args):
        return _Parser.CpuDataVector_erase(self, *args)

    def __init__(self, *args):
        this = _Parser.new_CpuDataVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Parser.CpuDataVector_push_back(self, x)

    def front(self):
        return _Parser.CpuDataVector_front(self)

    def back(self):
        return _Parser.CpuDataVector_back(self)

    def assign(self, n, x):
        return _Parser.CpuDataVector_assign(self, n, x)

    def resize(self, *args):
        return _Parser.CpuDataVector_resize(self, *args)

    def insert(self, *args):
        return _Parser.CpuDataVector_insert(self, *args)

    def reserve(self, n):
        return _Parser.CpuDataVector_reserve(self, n)

    def capacity(self):
        return _Parser.CpuDataVector_capacity(self)
    __swig_destroy__ = _Parser.delete_CpuDataVector
    __del__ = lambda self: None
CpuDataVector_swigregister = _Parser.CpuDataVector_swigregister
CpuDataVector_swigregister(CpuDataVector)

class ProcDataVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProcDataVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProcDataVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Parser.ProcDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Parser.ProcDataVector___nonzero__(self)

    def __bool__(self):
        return _Parser.ProcDataVector___bool__(self)

    def __len__(self):
        return _Parser.ProcDataVector___len__(self)

    def pop(self):
        return _Parser.ProcDataVector_pop(self)

    def __getslice__(self, i, j):
        return _Parser.ProcDataVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Parser.ProcDataVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Parser.ProcDataVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Parser.ProcDataVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Parser.ProcDataVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Parser.ProcDataVector___setitem__(self, *args)

    def append(self, x):
        return _Parser.ProcDataVector_append(self, x)

    def empty(self):
        return _Parser.ProcDataVector_empty(self)

    def size(self):
        return _Parser.ProcDataVector_size(self)

    def clear(self):
        return _Parser.ProcDataVector_clear(self)

    def swap(self, v):
        return _Parser.ProcDataVector_swap(self, v)

    def get_allocator(self):
        return _Parser.ProcDataVector_get_allocator(self)

    def begin(self):
        return _Parser.ProcDataVector_begin(self)

    def end(self):
        return _Parser.ProcDataVector_end(self)

    def rbegin(self):
        return _Parser.ProcDataVector_rbegin(self)

    def rend(self):
        return _Parser.ProcDataVector_rend(self)

    def pop_back(self):
        return _Parser.ProcDataVector_pop_back(self)

    def erase(self, *args):
        return _Parser.ProcDataVector_erase(self, *args)

    def __init__(self, *args):
        this = _Parser.new_ProcDataVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Parser.ProcDataVector_push_back(self, x)

    def front(self):
        return _Parser.ProcDataVector_front(self)

    def back(self):
        return _Parser.ProcDataVector_back(self)

    def assign(self, n, x):
        return _Parser.ProcDataVector_assign(self, n, x)

    def resize(self, *args):
        return _Parser.ProcDataVector_resize(self, *args)

    def insert(self, *args):
        return _Parser.ProcDataVector_insert(self, *args)

    def reserve(self, n):
        return _Parser.ProcDataVector_reserve(self, n)

    def capacity(self):
        return _Parser.ProcDataVector_capacity(self)
    __swig_destroy__ = _Parser.delete_ProcDataVector
    __del__ = lambda self: None
ProcDataVector_swigregister = _Parser.ProcDataVector_swigregister
ProcDataVector_swigregister(ProcDataVector)

class thread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, thread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, thread, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _Parser.thread_name_set
    __swig_getmethods__["name"] = _Parser.thread_name_get
    if _newclass:
        name = _swig_property(_Parser.thread_name_get, _Parser.thread_name_set)
    __swig_setmethods__["pid"] = _Parser.thread_pid_set
    __swig_getmethods__["pid"] = _Parser.thread_pid_get
    if _newclass:
        pid = _swig_property(_Parser.thread_pid_get, _Parser.thread_pid_set)
    __swig_setmethods__["cpu"] = _Parser.thread_cpu_set
    __swig_getmethods__["cpu"] = _Parser.thread_cpu_get
    if _newclass:
        cpu = _swig_property(_Parser.thread_cpu_get, _Parser.thread_cpu_set)
    __swig_setmethods__["usagePercentage"] = _Parser.thread_usagePercentage_set
    __swig_getmethods__["usagePercentage"] = _Parser.thread_usagePercentage_get
    if _newclass:
        usagePercentage = _swig_property(_Parser.thread_usagePercentage_get, _Parser.thread_usagePercentage_set)
    __swig_setmethods__["curUpTime"] = _Parser.thread_curUpTime_set
    __swig_getmethods__["curUpTime"] = _Parser.thread_curUpTime_get
    if _newclass:
        curUpTime = _swig_property(_Parser.thread_curUpTime_get, _Parser.thread_curUpTime_set)
    __swig_setmethods__["prevUpTime"] = _Parser.thread_prevUpTime_set
    __swig_getmethods__["prevUpTime"] = _Parser.thread_prevUpTime_get
    if _newclass:
        prevUpTime = _swig_property(_Parser.thread_prevUpTime_get, _Parser.thread_prevUpTime_set)

    def __init__(self):
        this = _Parser.new_thread()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Parser.delete_thread
    __del__ = lambda self: None
thread_swigregister = _Parser.thread_swigregister
thread_swigregister(thread)
cvar = _Parser.cvar

class process(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, process, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, process, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _Parser.process_name_set
    __swig_getmethods__["name"] = _Parser.process_name_get
    if _newclass:
        name = _swig_property(_Parser.process_name_get, _Parser.process_name_set)
    __swig_setmethods__["pid"] = _Parser.process_pid_set
    __swig_getmethods__["pid"] = _Parser.process_pid_get
    if _newclass:
        pid = _swig_property(_Parser.process_pid_get, _Parser.process_pid_set)
    __swig_setmethods__["ppid"] = _Parser.process_ppid_set
    __swig_getmethods__["ppid"] = _Parser.process_ppid_get
    if _newclass:
        ppid = _swig_property(_Parser.process_ppid_get, _Parser.process_ppid_set)
    __swig_setmethods__["threads"] = _Parser.process_threads_set
    __swig_getmethods__["threads"] = _Parser.process_threads_get
    if _newclass:
        threads = _swig_property(_Parser.process_threads_get, _Parser.process_threads_set)

    def __init__(self):
        this = _Parser.new_process()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Parser.delete_process
    __del__ = lambda self: None
process_swigregister = _Parser.process_swigregister
process_swigregister(process)

class cpu(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpu, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpu, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _Parser.cpu_name_set
    __swig_getmethods__["name"] = _Parser.cpu_name_get
    if _newclass:
        name = _swig_property(_Parser.cpu_name_get, _Parser.cpu_name_set)
    __swig_setmethods__["usagePercentage"] = _Parser.cpu_usagePercentage_set
    __swig_getmethods__["usagePercentage"] = _Parser.cpu_usagePercentage_get
    if _newclass:
        usagePercentage = _swig_property(_Parser.cpu_usagePercentage_get, _Parser.cpu_usagePercentage_set)
    __swig_setmethods__["totalTime"] = _Parser.cpu_totalTime_set
    __swig_getmethods__["totalTime"] = _Parser.cpu_totalTime_get
    if _newclass:
        totalTime = _swig_property(_Parser.cpu_totalTime_get, _Parser.cpu_totalTime_set)
    __swig_setmethods__["prevTotalTime"] = _Parser.cpu_prevTotalTime_set
    __swig_getmethods__["prevTotalTime"] = _Parser.cpu_prevTotalTime_get
    if _newclass:
        prevTotalTime = _swig_property(_Parser.cpu_prevTotalTime_get, _Parser.cpu_prevTotalTime_set)
    __swig_setmethods__["idleTime"] = _Parser.cpu_idleTime_set
    __swig_getmethods__["idleTime"] = _Parser.cpu_idleTime_get
    if _newclass:
        idleTime = _swig_property(_Parser.cpu_idleTime_get, _Parser.cpu_idleTime_set)
    __swig_setmethods__["prevIdleTime"] = _Parser.cpu_prevIdleTime_set
    __swig_getmethods__["prevIdleTime"] = _Parser.cpu_prevIdleTime_get
    if _newclass:
        prevIdleTime = _swig_property(_Parser.cpu_prevIdleTime_get, _Parser.cpu_prevIdleTime_set)

    def __init__(self):
        this = _Parser.new_cpu()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Parser.delete_cpu
    __del__ = lambda self: None
cpu_swigregister = _Parser.cpu_swigregister
cpu_swigregister(cpu)

class cpu_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpu_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpu_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _Parser.cpu_data_name_set
    __swig_getmethods__["name"] = _Parser.cpu_data_name_get
    if _newclass:
        name = _swig_property(_Parser.cpu_data_name_get, _Parser.cpu_data_name_set)
    __swig_setmethods__["total"] = _Parser.cpu_data_total_set
    __swig_getmethods__["total"] = _Parser.cpu_data_total_get
    if _newclass:
        total = _swig_property(_Parser.cpu_data_total_get, _Parser.cpu_data_total_set)
    __swig_setmethods__["idle"] = _Parser.cpu_data_idle_set
    __swig_getmethods__["idle"] = _Parser.cpu_data_idle_get
    if _newclass:
        idle = _swig_property(_Parser.cpu_data_idle_get, _Parser.cpu_data_idle_set)
    __swig_setmethods__["usage"] = _Parser.cpu_data_usage_set
    __swig_getmethods__["usage"] = _Parser.cpu_data_usage_get
    if _newclass:
        usage = _swig_property(_Parser.cpu_data_usage_get, _Parser.cpu_data_usage_set)

    def __init__(self):
        this = _Parser.new_cpu_data()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Parser.delete_cpu_data
    __del__ = lambda self: None
cpu_data_swigregister = _Parser.cpu_data_swigregister
cpu_data_swigregister(cpu_data)

class process_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, process_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, process_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _Parser.process_data_name_set
    __swig_getmethods__["name"] = _Parser.process_data_name_get
    if _newclass:
        name = _swig_property(_Parser.process_data_name_get, _Parser.process_data_name_set)
    __swig_setmethods__["pid"] = _Parser.process_data_pid_set
    __swig_getmethods__["pid"] = _Parser.process_data_pid_get
    if _newclass:
        pid = _swig_property(_Parser.process_data_pid_get, _Parser.process_data_pid_set)
    __swig_setmethods__["time"] = _Parser.process_data_time_set
    __swig_getmethods__["time"] = _Parser.process_data_time_get
    if _newclass:
        time = _swig_property(_Parser.process_data_time_get, _Parser.process_data_time_set)
    __swig_setmethods__["cpu"] = _Parser.process_data_cpu_set
    __swig_getmethods__["cpu"] = _Parser.process_data_cpu_get
    if _newclass:
        cpu = _swig_property(_Parser.process_data_cpu_get, _Parser.process_data_cpu_set)
    __swig_setmethods__["usage"] = _Parser.process_data_usage_set
    __swig_getmethods__["usage"] = _Parser.process_data_usage_get
    if _newclass:
        usage = _swig_property(_Parser.process_data_usage_get, _Parser.process_data_usage_set)

    def __init__(self):
        this = _Parser.new_process_data()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Parser.delete_process_data
    __del__ = lambda self: None
process_data_swigregister = _Parser.process_data_swigregister
process_data_swigregister(process_data)


def refreshCPU():
    return _Parser.refreshCPU()
refreshCPU = _Parser.refreshCPU

def updateCPUData(cpus):
    return _Parser.updateCPUData(cpus)
updateCPUData = _Parser.updateCPUData

def getCPU(path):
    return _Parser.getCPU(path)
getCPU = _Parser.getCPU

def isInteger(s):
    return _Parser.isInteger(s)
isInteger = _Parser.isInteger

def getUpTime(path, cpu):
    return _Parser.getUpTime(path, cpu)
getUpTime = _Parser.getUpTime

def getThreadInfo(path):
    return _Parser.getThreadInfo(path)
getThreadInfo = _Parser.getThreadInfo

def getProcessInfo(path):
    return _Parser.getProcessInfo(path)
getProcessInfo = _Parser.getProcessInfo

def refreshProcesses():
    return _Parser.refreshProcesses()
refreshProcesses = _Parser.refreshProcesses

def updateProcessData(existingProcesses, cpus):
    return _Parser.updateProcessData(existingProcesses, cpus)
updateProcessData = _Parser.updateProcessData

def getProcessCPULoad(existingProcesses, cpus, index):
    return _Parser.getProcessCPULoad(existingProcesses, cpus, index)
getProcessCPULoad = _Parser.getProcessCPULoad
# This file is compatible with both classic and new-style classes.


